{"version":3,"sources":["componants/Selection.js","componants/Questions.js","componants/Results.js","componants/Test.js","App.js","serviceWorker.js","index.js"],"names":["Selection","props","handleChange","target","setState","name","value","buttonClick","console","log","data","difficulty","state","amount","category","formSubmit","Container","Row","Col","md","span","offset","Card","Body","Form","Group","controlId","Label","htmlFor","Control","as","id","this","onChange","ref","Button","onClick","variant","size","block","React","Component","Questions","questions","useState","count","setCount","map","question","i","key","className","ButtonGroup","correct_answer","incorrect_answers","Results","score","Test","complete","testButtonClick","testSubmit","counts","url","fetch","then","res","json","results","catch","increment","bind","App","selected","loadTest","dataObject","scoreTest","testScore","testCount","Navbar","bg","fixed","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.be69d8b7.chunk.js","sourcesContent":["import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col'\nimport Form from 'react-bootstrap/Form'\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row'\nimport Card from 'react-bootstrap/Card'\n\n\n\nclass Selection extends React.Component {\n\n  //sets state\n  constructor(props){\n    super(props);\n    this.state = { \n      category: '24', \n      amount: '10', \n      difficulty: 'easy' \n    };\n  }\n\n  //changes state to user input   \n  handleChange = ({ target }) => {\n   this.setState({ [target.name]: target.value }); \n  };\n\n  //puts state into data object\n  buttonClick = () => {\n    console.log('button clicked');\n    let data = {\n      difficulty:this.state.difficulty, \n      amount:this.state.amount, \n      category:this.state.category\n    }\n    this.props.formSubmit(data)       \n  }\n     \n  render() {\n    return (\n      <Container>\n        <h1>Select Your Test</h1>\n        <Row>\n        <Col md={{ span: 6, offset: 3 }}>\n          <Card>\n            <Card.Body>\n        <Form>\n        <Form.Group controlId=\"exampleForm.ControlInput1\">\n          <Form.Label htmlFor=\"subject\">Subject:</Form.Label>\n          <Form.Control as='select'\n            name=\"category\" \n            id=\"catigory\"\n            value={this.state.category}\n            onChange={this.handleChange}\n            >\n            <option value=\"24\">Politics</option>\n            <option value=\"23\">History</option>\n            <option value=\"22\">Geography</option>\n            <option value=\"12\">Music</option>\n            <option value=\"21\">Sports</option>\n            <option value=\"27\">Animals</option>\n          </Form.Control>\n          </Form.Group>\n          <Form.Group controlId=\"exampleForm.ControlInput2\">\n          <label htmlFor=\"questions\">Questions:</label>\n          <Form.Control as='select' \n            name=\"amount\" \n            id=\"amount\"\n            value={this.state.amount}\n            onChange={this.handleChange}\n            >\n            <option value=\"5\">5</option>\n            <option value=\"10\">10</option>\n            <option value=\"25\">25</option>\n            <option value=\"50\">50</option>\n            </Form.Control>\n          </Form.Group>\n          <Form.Group controlId=\"exampleForm.ControlInput2\">\n          <label htmlFor=\"difficulty\">Difficulty:</label>\n          <Form.Control as='select' \n            name=\"difficulty\" \n            id=\"difficulty\"\n            ref=\"difficulty\"\n            value={this.state.difficulty}\n            onChange={this.handleChange}\n            >\n            <option value=\"easy\">Easy</option>\n            <option value=\"medium\">Medium</option>\n            <option value=\"hard\">Hard</option>\n            </Form.Control>\n          </Form.Group>\n\n          <Col md={{ span: 6, offset: 3 }}>\n            <Button onClick={this.buttonClick} variant=\"primary\" size=\"lg\" block>\n              Load Test\n            </Button>\n          </Col>\n\n\n        </Form>\n        </Card.Body>\n        </Card>\n        </Col>\n\n        \n\n\n        </Row>\n        </Container>\n    );\n  }\n}\n\nexport default Selection;","\nimport React, { useState } from 'react';\nimport Card from 'react-bootstrap/Card'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\nimport Button from 'react-bootstrap/Button'\n\n\nconst Questions = ({ questions }) => {\n  \n\n\n  const [count, setCount] = useState(0);\n  console.log(count);\n  \n  \n  return (\n    <div>\n      <h1>Test Questions</h1>\n\n\n\n      {questions.map((question,i) => (\n        <Container key={i}>\n          <Row>\n            <Col md={{ span: 10, offset: 1 }}>\n              <Card>\n                <Card.Body>\n                  <p>{question.question}</p>\n                  <div className=\"d-flex flex-column\">\n                    <ButtonGroup className=\"mt-3\">\n                      <Button  onClick={() => setCount(count + 1)} variant=\"secondary\">{question.correct_answer}</Button>\n                      <Button variant=\"secondary\">{question.incorrect_answers[0]}</Button>\n                      <Button variant=\"secondary\">{question.incorrect_answers[1]}</Button>\n                      <Button variant=\"secondary\">{question.incorrect_answers[2]}</Button>\n                    </ButtonGroup>\n                  </div>\n                </Card.Body>\n              </Card>\n            </Col>\n          </Row>\n          <br></br> \n\n        </Container>\n        ))\n      }\n\n        \n\n      \n    </div>\n  )\n};\n\nexport default Questions","import React from 'react'\nimport Card from 'react-bootstrap/Card'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n\n\nconst Results = (score) => {\n\n  \n  return (\n    <Container>\n      <h1>Score</h1>\n    <Row>\n      <Col md={{ span: 6, offset: 3 }}>\n        <Card>\n          <Card.Body>\n          <div>\n\n<h2>You scored</h2>\n<p>{score.score} %</p>\n    </div>\n          </Card.Body>\n        </Card>\n      </Col>\n    </Row>\n    <br></br> \n\n  </Container>\n\n  )\n};\n\nexport default Results","import React from 'react';\nimport Questions from './Questions';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Results from './Results';\n\nclass Test extends React.Component {\n\n  //sets state\n  state = {\n    questions: [],\n    score: 0,\n    complete: false,\n    count: 0\n  }\n\n  //puts test score into score object and loads Results.js\n  testButtonClick = () => {\n    console.log('button clicked'); \n    this.setState({complete: true}) \n    let score = {\n      score:this.state.count\n    }\n    this.props.testSubmit(score)\n    \n    console.log('score',score)\n  }\n\n  increment(){\n    this.setState({ counts : this.state.count + 1});\n}\n\n  //API call\n  componentDidMount() {\n    const url = `https://opentdb.com/api.php?amount=${this.props.amount}&category=${this.props.category}&difficulty=${this.props.difficulty}&type=multiple`;\n      \n    fetch(url)\n    .then(res => res.json())\n    .then((data) => {\n      this.setState({ questions: data.results })\n      console.log(url,data.results)\n    })\n    .catch(console.log)\n  }\n  \n\n  render () {\n    return (\n      <div className=''>\n        {this.state.complete ? \n         <Results score={this.state.score} /> :\n         <Questions score={this.state.score} questions={this.state.questions} count={this.state.count} increment={this.increment.bind(this)}/> \n        }      \n      \n          <Col md={{ span: 8, offset: 2 }}> \n            <Button onClick={this.testButtonClick} variant=\"primary\" size=\"lg\" block>\n              Score Test\n            </Button>\n          </Col>\n     \n      </div>\n    );\n  }\n};\n\n\n\nexport default Test","import React, { Component } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Selection from './componants/Selection';\nimport Test from './componants/Test';\nimport Navbar from 'react-bootstrap/Navbar'\n\n\n\nclass App extends Component {\n\n  //creates state\n  state = {\n    selected: false,\n    difficulty: '',\n    amount: '',\n    category: '',\n  }\n\n  //brings data object from Selection.js and sets state to user input\n  loadTest = (dataObject) => {\n    console.log('load test', dataObject)\n    this.setState(dataObject)\n    this.setState({selected: true})\n  }\n\n  //brings test score from Test.js\n  scoreTest = (testScore) => {\n    this.setState(testScore)\n    console.log('Test Score',testScore);\n  }\n\n  testCount = (count) => {\n    this.setState(count)\n    console.log('count :', count)\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Navbar bg='dark'></Navbar>\n        {this.state.selected ? \n          <Test testCount={this.testCount} testSubmit={this.scoreTest} difficulty={this.state.difficulty} amount={this.state.amount} category={this.state.category}/> : \n          <Selection formSubmit={this.loadTest} \n        />}\n        <Navbar bg='dark' fixed=\"bottom\" ></Navbar>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}